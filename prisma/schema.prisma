generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int? 
  token_type        String? 
  scope             String? 
  id_token          String? 
  session_state     String? 
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conference {
  id               String   @id @default(cuid())
  organiserEmail   String
  name             String
  startDate        DateTime
  endDate          DateTime
  participationFee Float
  paymentDetails   String
  venue            String
  contactDetails   String
  logo             Bytes?
  committees       String[]
  agendas          String[]
  committeeMatrix Json?
  createdAt        DateTime @default(now())
  
  participants     ConferenceParticipant[]
  announcements   String[]  @default([])
  policyText      String?   // Optional policy text
  executiveBoards ExecutiveBoard[]
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?

  conferenceParticipation ConferenceParticipant[]
  executiveBoards         ExecutiveBoard[]   // ðŸ‘ˆ Add this line
}


model ConferenceParticipant {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String
  committee    String?    // Assigned committee
  portfolio    String?    // Assigned portfolio

  // New preference fields
  committeePref1   String?
  portfolioPref1   String?
  committeePref2   String?
  portfolioPref2   String?
  committeePref3   String?
  portfolioPref3   String?
  remarks          String?

  createdAt    DateTime   @default(now())

  @@unique([userId, conferenceId])
}

model ExecutiveBoard {
  id           String     @id @default(uuid())
  title        String
  committee    String

  user         User       @relation(fields: [userId], references: [id])
  userId       String

  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String

  @@unique([userId, conferenceId])
}



